
val sqlcontext = new org.apache.spark.sql.SQLContext(sc)

val dashdata = sqlcontext.load("jdbc", Map(
"url" -> "jdbc:db2://dashdb-entry-yp-dal09-07.services.dal.bluemix.net:50000/BLUDB:user=dash6999;password=tXtJ4ue9gvBf;",
"dbtable" -> "DASH6999.CINEMAS_TWEETS"))

dashdata.registerTempTable("TWEETS_TABLE")

val Q1  =  sqlcontext.sql("SELECT USER_DISPLAY_NAME,MAX(USER_FOLLOWERS_COUNT) AS F_COUNT FROM TWEETS_TABLE  GROUP by USER_DISPLAY_NAME  ORDER BY F_COUNT DESC ")

Q1.show

Q1.saveAsParquetFile("FOLLOWERS.PARQUET")

val Q2  =  sqlcontext.sql("SELECT MESSAGE_LANGUAGE,COUNT(MESSAGE_ID) AS L_COUNT FROM TWEETS_TABLE  GROUP by MESSAGE_LANGUAGE  ORDER BY L_COUNT DESC ")

Q2.show

Q2.saveAsParquetFile("LANG.PARQUET")

val Q3  =  sqlcontext.sql("SELECT MESSAGE_COUNTRY,COUNT(MESSAGE_ID) AS C_COUNT FROM TWEETS_TABLE  GROUP by MESSAGE_COUNTRY  ORDER BY C_COUNT DESC ")

Q3.show

Q3.saveAsParquetFile("COUNTRY1.PARQUET")

val Q4 = sqlcontext.sql("SELECT USER_CITY, COUNT(MESSAGE_ID) AS C2_COUNT FROM TWEETS_TABLE WHERE (MESSAGE_BODY LIKE '%AWARD%' OR MESSAGE_BODY LIKE '%Award%' OR MESSAGE_BODY LIKE '%award%') AND USER_CITY IS NOT NULL GROUP BY USER_CITY ORDER BY C2_COUNT DESC")

Q4.show

Q4.saveAsParquetFile("AW.PARQUET")

val dashdata = sqlcontext.load("jdbc", Map(
"url" -> "jdbc:db2://dashdb-entry-yp-dal09-07.services.dal.bluemix.net:50000/BLUDB:user=dash6999;password=tXtJ4ue9gvBf;",
"dbtable" -> "DASH6999.CINEMAS_SENTIMENTS"))

dashdata.registerTempTable("TWEETS_TABLE2")

val Q5  =  sqlcontext.sql("SELECT SENTIMENT_POLARITY,COUNT(MESSAGE_ID) AS S_COUNT FROM TWEETS_TABLE2 GROUP BY SENTIMENT_POLARITY ORDER BY S_COUNT DESC")

Q5.show

Q5.saveAsParquetFile("SENTIMENT.PARQUET")

val Q6  =  sqlcontext.sql("SELECT SENTIMENT_TERM,COUNT(MESSAGE_ID) AS S2_COUNT FROM TWEETS_TABLE2 GROUP BY SENTIMENT_TERM ORDER BY S2_COUNT DESC")

Q6.show

Q6.saveAsParquetFile("SENTIMENT2.PARQUET")

val Q7 = sqlcontext.sql("SELECT MESSAGE_COUNTRY, COUNT(*) AS T_COUNT FROM TWEETS_TABLE WHERE ((MESSAGE_COUNTRY IS NOT NULL) AND (MESSAGE_COUNTRY NOT LIKE '%?%') AND (SUBSTRING(MESSAGE_POSTED_TIME ,12 ,2) BETWEEN 0 AND 12)) GROUP BY MESSAGE_COUNTRY ORDER BY T_COUNT DESC LIMIT 10")

Q7.show

Q7.saveAsParquetFile("MORNING.PARQUET")

val Q8 = sqlcontext.sql("SELECT MESSAGE_COUNTRY, COUNT(*) AS T_COUNT FROM TWEETS_TABLE WHERE MESSAGE_COUNTRY IS NOT NULL AND SUBSTRING(MESSAGE_POSTED_TIME ,12 ,2) BETWEEN 12 AND 24 GROUP BY MESSAGE_COUNTRY ORDER BY T_COUNT DESC LIMIT 10")

Q8.show

Q8.saveAsParquetFile("EVENING.PARQUET")


